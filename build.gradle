import com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask

plugins {
    id("org.jetbrains.kotlin.jvm") version "1.4.10"
    id("org.jetbrains.kotlin.kapt") version "1.4.10"
    id("org.jetbrains.kotlin.plugin.allopen") version "1.4.10"
    id("com.github.johnrengelman.shadow") version "6.1.0"
    id("io.micronaut.application") version "1.3.4"
    id("com.github.davidmc24.gradle.plugin.avro") version "1.0.0"
}

version = "0.1"
group = "io.github.wesleyosantos91"

repositories {
    mavenCentral()
    maven{
        url = uri("https://packages.confluent.io/maven/")
    }

}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("io.github.wesleyosantos91.*")
    }
}

dependencies {
    implementation("io.micronaut:micronaut-validation")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.kafka:micronaut-kafka")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")

    // Avro
    implementation("org.apache.avro:avro:1.10.1")

    // Confluent
    implementation("io.confluent:kafka-schema-registry-client:6.1.0")
    implementation("io.confluent:kafka-streams-avro-serde:6.1.0")
    implementation("io.confluent:kafka-avro-serializer:5.2.1")

    testImplementation("io.micronaut:micronaut-http-client")
}


application {
    mainClass.set("io.github.wesleyosantos91.ApplicationKt")
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
}

tasks {
    compileKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs("build/generated/source/avro/main/java")
        }
    }
}

def generateAvro = tasks.register("generateAvro", GenerateAvroJavaTask) {
    source("src/main/resources/avro")
    outputDir = file("build/generated/source/avro/main/java")
}

tasks.named("compileJava").configure {
    source(generateAvro)
}